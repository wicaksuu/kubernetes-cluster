# =====================================================================
# NAMESPACE
# =====================================================================
apiVersion: v1
kind: Namespace
metadata:
  name: mariadb

# =====================================================================
# SECRETS (GANTI PASSWORD!)
# =====================================================================
---
apiVersion: v1
kind: Secret
metadata:
  name: mariadb-secrets
  namespace: mariadb
type: Opaque
stringData:
  MARIADB_ROOT_PASSWORD: "J@ck03061997"
  REPL_USER: "repl_user"
  REPL_PASS: "ChangeRepl#2025"
  APP_USER: "app_user"
  APP_PASS: "J@ck03061997"

# =====================================================================
# CONFIGMAPS - PRIMARY & SECONDARY (TANPA SEMI-SYNC; AMAN START)
# =====================================================================
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: mariadb-config-primary
  namespace: mariadb
data:
  my.cnf: |
    [mysqld]
    # --- Core ---
    server_id=1
    log_bin=ON
    binlog_format=ROW
    sync_binlog=1
    skip_name_resolve=ON
    character-set-server=utf8mb4
    collation-server=utf8mb4_unicode_ci

    # --- InnoDB ---
    innodb_buffer_pool_size=1G
    innodb_log_file_size=256M
    innodb_flush_method=O_DIRECT
    innodb_flush_log_at_trx_commit=1
    innodb_io_capacity=1500
    innodb_io_capacity_max=3000

    # --- Connections ---
    max_connections=4000
    thread_cache_size=256
    table_open_cache=6000
    table_definition_cache=3000
    open_files_limit=150000

    # --- Timeouts ---
    connect_timeout=10
    wait_timeout=600
    interactive_timeout=600

---
apiVersion: v1
kind: ConfigMap
metadata:
  name: mariadb-config-secondary
  namespace: mariadb
data:
  my.cnf: |
    [mysqld]
    # server_id akan dioverride initContainer -> unik per replica
    server_id=2
    read_only=ON
    super_read_only=ON
    log_bin=ON
    binlog_format=ROW
    skip_name_resolve=ON
    character-set-server=utf8mb4
    collation-server=utf8mb4_unicode_ci

    innodb_buffer_pool_size=1G
    innodb_log_file_size=256M
    innodb_flush_method=O_DIRECT
    innodb_flush_log_at_trx_commit=1

    max_connections=4000
    thread_cache_size=256
    table_open_cache=6000
    table_definition_cache=3000
    open_files_limit=150000

    connect_timeout=10
    wait_timeout=600
    interactive_timeout=600

# (Opsional) INIT SQL saat bootstrap pertama kali
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: mariadb-init-sql
  namespace: mariadb
data:
  01-init.sql: |
    -- Dibuat kalau pertama kali bootstrap (data dir kosong)
    CREATE DATABASE IF NOT EXISTS appdb;
    CREATE USER IF NOT EXISTS 'app_user'@'%' IDENTIFIED BY 'J@ck03061997';
    GRANT ALL PRIVILEGES ON appdb.* TO 'app_user'@'%';
    FLUSH PRIVILEGES;

# =====================================================================
# SERVICES
# =====================================================================
---
apiVersion: v1
kind: Service
metadata:
  name: mariadb-headless
  namespace: mariadb
  labels: { app.kubernetes.io/name: mariadb }
spec:
  clusterIP: None
  publishNotReadyAddresses: true
  selector:
    app.kubernetes.io/part-of: mariadb
  ports:
    - name: mysql
      port: 3306
      targetPort: mysql

---
apiVersion: v1
kind: Service
metadata:
  name: mariadb-primary
  namespace: mariadb
spec:
  type: ClusterIP
  selector:
    app.kubernetes.io/part-of: mariadb
    app.kubernetes.io/component: primary
  ports:
    - name: mysql
      port: 3306
      targetPort: mysql

---
apiVersion: v1
kind: Service
metadata:
  name: mariadb-secondary
  namespace: mariadb
spec:
  type: ClusterIP
  selector:
    app.kubernetes.io/part-of: mariadb
    app.kubernetes.io/component: secondary
  ports:
    - name: mysql
      port: 3306
      targetPort: mysql

# =====================================================================
# PRIMARY STATEFULSET
# =====================================================================
---
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: mariadb-primary
  namespace: mariadb
  labels:
    app.kubernetes.io/name: mariadb
    app.kubernetes.io/part-of: mariadb
    app.kubernetes.io/component: primary
spec:
  serviceName: mariadb-headless
  replicas: 1
  selector:
    matchLabels:
      app.kubernetes.io/part-of: mariadb
      app.kubernetes.io/component: primary
  template:
    metadata:
      labels:
        app.kubernetes.io/part-of: mariadb
        app.kubernetes.io/component: primary
    spec:
      securityContext:
        fsGroup: 1001
      containers:
        - name: mariadb
          image: bitnami/mariadb:11.4.2
          imagePullPolicy: IfNotPresent
          ports: [{ name: mysql, containerPort: 3306 }]
          env:
            - name: MARIADB_ROOT_PASSWORD
              valueFrom: { secretKeyRef: { name: mariadb-secrets, key: MARIADB_ROOT_PASSWORD } }
            - name: MARIADB_REPLICATION_MODE
              value: "master"
            - name: MARIADB_REPLICATION_USER
              valueFrom: { secretKeyRef: { name: mariadb-secrets, key: REPL_USER } }
            - name: MARIADB_REPLICATION_PASSWORD
              valueFrom: { secretKeyRef: { name: mariadb-secrets, key: REPL_PASS } }
            - name: MARIADB_USER
              valueFrom: { secretKeyRef: { name: mariadb-secrets, key: APP_USER } }
            - name: MARIADB_PASSWORD
              valueFrom: { secretKeyRef: { name: mariadb-secrets, key: APP_PASS } }
            - name: MARIADB_DATABASE
              value: "appdb"
            - name: MARIADB_SKIP_TEST_DB
              value: "yes"
            - name: BITNAMI_DEBUG
              value: "false"
          volumeMounts:
            - { name: data,   mountPath: /bitnami/mariadb }
            - { name: cfg,    mountPath: /bitnami/mariadb/conf/my_custom.cnf, subPath: my.cnf }
            - { name: initdb, mountPath: /docker-entrypoint-initdb.d }   # init SQL
          readinessProbe:
            exec:
              command: ["bash","-ec","/opt/bitnami/mariadb/bin/mariadb-admin ping -h 127.0.0.1 -uroot -p\"${MARIADB_ROOT_PASSWORD}\""]
            initialDelaySeconds: 15
            periodSeconds: 10
            timeoutSeconds: 5
            failureThreshold: 6
          livenessProbe:
            exec:
              command: ["bash","-ec","/opt/bitnami/mariadb/bin/mariadb-admin ping -h 127.0.0.1 -uroot -p\"${MARIADB_ROOT_PASSWORD}\""]
            initialDelaySeconds: 30
            periodSeconds: 20
            timeoutSeconds: 5
            failureThreshold: 6
          resources:
            requests: { cpu: "1000m", memory: "2Gi" }
            limits:   { cpu: "4",     memory: "8Gi" }
      volumes:
        - name: cfg
          configMap: { name: mariadb-config-primary }
        - name: initdb
          configMap: { name: mariadb-init-sql }
  volumeClaimTemplates:
    - metadata: { name: data }
      spec:
        accessModes: ["ReadWriteOnce"]
        storageClassName: longhorn
        resources: { requests: { storage: 20Gi } }

# =====================================================================
# SECONDARY STATEFULSET (+ initContainer server_id unik)
# =====================================================================
---
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: mariadb-secondary
  namespace: mariadb
  labels:
    app.kubernetes.io/name: mariadb
    app.kubernetes.io/part-of: mariadb
    app.kubernetes.io/component: secondary
spec:
  serviceName: mariadb-headless
  replicas: 2
  selector:
    matchLabels:
      app.kubernetes.io/part-of: mariadb
      app.kubernetes.io/component: secondary
  template:
    metadata:
      labels:
        app.kubernetes.io/part-of: mariadb
        app.kubernetes.io/component: secondary
    spec:
      securityContext:
        fsGroup: 1001
      initContainers:
        - name: set-server-id
          image: bitnami/mariadb:11.4.2
          command: ["/bin/bash","-c"]
          args:
            - |
              ordinal=$(echo "${HOSTNAME}" | grep -oE '[0-9]+$' || echo 0);
              sid=$((1000 + ordinal));
              cp /config-src/my.cnf /config-dst/my.cnf;
              sed -i "s/^server_id=.*/server_id=${sid}/" /config-dst/my.cnf;
          volumeMounts:
            - { name: config-src, mountPath: /config-src }
            - { name: config-dst, mountPath: /config-dst }
      containers:
        - name: mariadb
          image: bitnami/mariadb:11.4.2
          imagePullPolicy: IfNotPresent
          ports: [{ name: mysql, containerPort: 3306 }]
          env:
            - name: MARIADB_ROOT_PASSWORD
              valueFrom: { secretKeyRef: { name: mariadb-secrets, key: MARIADB_ROOT_PASSWORD } }
            - name: MARIADB_REPLICATION_MODE
              value: "slave"
            - name: MARIADB_REPLICATION_USER
              valueFrom: { secretKeyRef: { name: mariadb-secrets, key: REPL_USER } }
            - name: MARIADB_REPLICATION_PASSWORD
              valueFrom: { secretKeyRef: { name: mariadb-secrets, key: REPL_PASS } }
            - name: MARIADB_MASTER_HOST
              value: "mariadb-primary.mariadb.svc.cluster.local"
            - name: MARIADB_MASTER_PORT_NUMBER
              value: "3306"
            - name: MARIADB_SKIP_TEST_DB
              value: "yes"
            - name: BITNAMI_DEBUG
              value: "false"
          volumeMounts:
            - { name: data,       mountPath: /bitnami/mariadb }
            - { name: config-dst, mountPath: /bitnami/mariadb/conf/my_custom.cnf, subPath: my.cnf }
          readinessProbe:
            exec:
              command: ["bash","-ec","/opt/bitnami/mariadb/bin/mariadb-admin ping -h 127.0.0.1 -uroot -p\"${MARIADB_ROOT_PASSWORD}\""]
            initialDelaySeconds: 15
            periodSeconds: 10
            timeoutSeconds: 5
            failureThreshold: 6
          livenessProbe:
            exec:
              command: ["bash","-ec","/opt/bitnami/mariadb/bin/mariadb-admin ping -h 127.0.0.1 -uroot -p\"${MARIADB_ROOT_PASSWORD}\""]
            initialDelaySeconds: 30
            periodSeconds: 20
            timeoutSeconds: 5
            failureThreshold: 6
          resources:
            requests: { cpu: "500m", memory: "1Gi" }
            limits:   { cpu: "4",    memory: "8Gi" }
      volumes:
        - name: config-src
          configMap: { name: mariadb-config-secondary }
        - name: config-dst
          emptyDir: {}
  volumeClaimTemplates:
    - metadata: { name: data }
      spec:
        accessModes: ["ReadWriteOnce"]
        storageClassName: longhorn
        resources: { requests: { storage: 20Gi } }

# =====================================================================
# PDB
# =====================================================================
---
apiVersion: policy/v1
kind: PodDisruptionBudget
metadata:
  name: mariadb-primary-pdb
  namespace: mariadb
spec:
  minAvailable: 1
  selector:
    matchLabels:
      app.kubernetes.io/part-of: mariadb
      app.kubernetes.io/component: primary

---
apiVersion: policy/v1
kind: PodDisruptionBudget
metadata:
  name: mariadb-secondary-pdb
  namespace: mariadb
spec:
  minAvailable: 1
  selector:
    matchLabels:
      app.kubernetes.io/part-of: mariadb
      app.kubernetes.io/component: secondary

# =====================================================================
# HPA (Secondary autoscale horizontal)
# =====================================================================
---
apiVersion: autoscaling/v2
kind: HorizontalPodAutoscaler
metadata:
  name: mariadb-secondary-hpa
  namespace: mariadb
spec:
  scaleTargetRef:
    apiVersion: apps/v1
    kind: StatefulSet
    name: mariadb-secondary
  minReplicas: 2
  maxReplicas: 10
  metrics:
    - type: Resource
      resource:
        name: cpu
        target: { type: Utilization, averageUtilization: 60 }
  behavior:
    scaleUp:
      stabilizationWindowSeconds: 60
      policies:
        - { type: Percent, value: 100, periodSeconds: 60 }
        - { type: Pods,    value: 2,   periodSeconds: 60 }
      selectPolicy: Max
    scaleDown:
      stabilizationWindowSeconds: 300
      policies:
        - { type: Percent, value: 50, periodSeconds: 60 }
      selectPolicy: Max

# =====================================================================
# PROXYSQL (HA) + Service
# =====================================================================
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: proxysql-config
  namespace: mariadb
data:
  proxysql.cnf: |
    datadir="/var/lib/proxysql"
    admin_variables=
    {
      admin_credentials="admin:admin"
      web_enabled=true
      stats_credentials="stats:stats"
      mysql_ifaces="0.0.0.0:6032"
      web_ifaces="0.0.0.0:6080"
    }
    mysql_variables=
    {
      threads=4
      max_connections=10000
      default_query_delay=0
      default_query_timeout=900000
      interfaces="0.0.0.0:6033"
      monitor_username="monitor"
      monitor_password="monitorpass"
    }
    mysql_servers =
    (
      { address="mariadb-primary.mariadb.svc.cluster.local", port=3306, hostgroup=10, max_connections=2000, weight=100 },  -- writer
      { address="mariadb-secondary.mariadb.svc.cluster.local", port=3306, hostgroup=20, max_connections=4000, weight=100 } -- readers (svc → pool replicas)
    )
    mysql_users =
    (
      { username="app_user" , password="J@ck03061997" , default_hostgroup=10 , transaction_persistent=1 , active=1 }
    )
    mysql_query_rules =
    (
      { rule_id=1 , active=1 , match_pattern="^\\s*SELECT" , destination_hostgroup=20 , apply=1 },
      { rule_id=2 , active=1 , destination_hostgroup=10 , apply=1 }  -- default → writer
    )

---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: proxysql
  namespace: mariadb
  labels: { app: proxysql }
spec:
  replicas: 2
  selector:
    matchLabels: { app: proxysql }
  template:
    metadata:
      labels: { app: proxysql }
    spec:
      containers:
        - name: proxysql
          image: proxysql/proxysql:2.6.3
          ports:
            - { name: mysql, containerPort: 6033 }
            - { name: admin, containerPort: 6032 }
            - { name: http,  containerPort: 6080 }
          volumeMounts:
            - { name: cfg, mountPath: /etc/proxysql }
          readinessProbe: { tcpSocket: { port: 6033 }, initialDelaySeconds: 5, periodSeconds: 10 }
          livenessProbe:  { tcpSocket: { port: 6033 }, initialDelaySeconds: 10, periodSeconds: 20 }
          resources:
            requests: { cpu: "200m", memory: "256Mi" }
            limits:   { cpu: "2",    memory: "2Gi" }
      volumes:
        - name: cfg
          configMap: { name: proxysql-config }

---
apiVersion: v1
kind: Service
metadata:
  name: proxysql
  namespace: mariadb
spec:
  type: ClusterIP
  selector: { app: proxysql }
  ports:
    - { name: mysql, port: 6033, targetPort: mysql }
    - { name: admin, port: 6032, targetPort: admin }
